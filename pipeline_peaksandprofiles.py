##############################################################################
#
#   MRC FGU CGAT
#
#   $Id$
#
#   Copyright (C) 2009 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
###############################################################################
"""===========================
Pipeline template
===========================

:Author: Jacob Parker
:Release: $Id$
:Date: |today|
:Tags: Python

This pipeline calculates the number of mismatches per base for a given set of genes for mapped RNA-seq data using pysam.
The data are merged into one final table.

Overview
========

files :file:``pipeline.ini` and :file:`conf.py`.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.ini` file.
CGATReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_mismatch.py config

Input files
-----------

Set of genes, as specified in the `pipeline.ini` file (job:gene_list).

Requirements
------------

The pipeline requires the results from
:doc:`pipeline_annotations`. Set the configuration variable
:py:data:`annotations_database` and :py:data:`annotations_dir`.

On top of the default CGAT setup, the pipeline requires the following
software to be in the path:

.. Add any additional external requirements such as 3rd party software
   or R modules below:

Requirements:

* samtools >= 1.1

Pipeline output
===============

.. Describe output files of the pipeline here

Glossary
========

.. glossary::


Code
====

"""
from ruffus import *

import sys
import os
import sqlite3
import CGAT.Experiment as E
import CGATPipelines.Pipeline as P
import re
# load options from the config file
PARAMS = P.getParameters(
    ["%s/pipeline.ini" % os.path.splitext(__file__)[0],
     "../pipeline.ini",
     "pipeline.ini"])

PARAMS["pipelinedir"] = os.path.dirname(__file__)
# ---------------------------------------------------
# Specific pipeline tasks
#Files must be in the format: variable1(e.g.Tissue)-ChiporControl-variable2
#(e.g.Experimentalcondition)-Furthercondition(if needed e.g. protein)
#and/orreplicate.bam
#Example: Cerebellum-Chip-minusCPT-Top1_2.bam
#Controls must have 1 as the value in the final position
@follows(mkdir("filtered_bams.dir"))
@transform("*.bam", regex(r"(.+).bam"),
          r"filtered_bams.dir/\1.filtered.bam")
def filterunmappedreads(infile,outfile):
    statement='''samtools view -b -o %(outfile)s -F 4 %(infile)s'''
    job_memory="4G"
    P.run()


@follows(mkdir("prepped_bams.dir"))
@transform(filterunmappedreads,
           regex(r"filtered_bams.dir/(.+).bam"),
           r"prepped_bams.dir/\1.prep.bam")
def prepareBAMForPeakCalling(infile, outfile):
    
    metrics_file=P.snip(outfile, ".bam") + ".metrics"
    statement='''MarkDuplicates I=%(infile)s  
                                O=%(outfile)s 
                                M=%(metrics_file)s > %(outfile)s.log'''
    job_memory="6G"
    P.run()

@follows(mkdir("geneprofiles.dir"))
@transform("*.bam",regex(r"(.+)-Chip-(.+)-(.+).bam"),
           add_inputs(r"\1-Control-\2-1.bam"),
           r"geneprofiles.dir/\1-Chip-\2-\3.bam2geneprofile")
def geneprofiles(infiles,outfile):
    bamfile, controlfile = infiles
    base=re.search(r"(geneprofiles.dir/.+-Chip-.+-.+).bam2geneprofile", outfile, flags = 0)  
    base=base.group(1)
    outputallprofiles = PARAMS["job_outputallprofiles"]
    if outputallprofiles == 1:
        outputprofiles = "--output-all-profiles"
    elif outputallprofiles == 0:
        outputprofiles = ""
    statement='''python ~/devel/cgat/scripts/bam2geneprofile.py
                 -b %(bamfile)s
                 -c %(controlfile)s
                 -g /shared/sudlab1/General/annotations/mm10_ensembl85/ensembl.dir/geneset_all.gtf.gz
                 -m geneprofile 
                 -m tssprofile
                 %(outputprofiles)s                 
                 --normalize-transcript=total-sum
                 --normalize-profile=area
                 --merge-pairs
                 -P %(base)s%%s > 
                 %(outfile)s'''
    job_memory="6G"
    P.run()

@follows(mkdir("peakcalling.dir"))
@transform(prepareBAMForPeakCalling,
	   regex(r"prepped_bams.dir/(.+)-Chip-(.+)-(.+).filtered.prep.bam"),
           add_inputs(r"prepped_bams.dir/\1-Control-\2-1.filtered.prep.bam"),
           r"peakcalling.dir/\1-chip-\2-\3.bam.macs2")
def peakcall(infiles,outfile):
    bamfile, controlfile = infiles
    peakcalling = PARAMS["job_peakcalling"]
    if peakcalling == 1:
        peaks = "--broad"
    elif peakcalling == 0:
        peaks = "" 
    drctry=re.search(r"(peakcalling.dir/.+-chip-.+-.+).bam.macs2", outfile, flags = 0)
    drc=drctry.group(1)
    statement='''macs2 callpeak -t %(bamfile)s 
                                -c %(controlfile)s
                                -g mm
                                --verbose=2
                                %(peaks)s
                                -f BAMPE 
                                --outdir %(drc)s
                                --tempdir %(tmpdir)s >
                                %(outfile)s'''
    job_memory="6G"
    P.run()

@follows("geneprofiles")
@transform("geneprofiles.dir/*geneprofile.profiles.tsv.gz", regex(r"(.+).geneprofile.profiles.tsv.gz"),r"\1.normalisedprofile.tsv.gz")
def normaliseprofiles(infile, outfile):
    statement = '''python ~/devel/pipeline_peaksandprofiles/pipeline_peaksandprofiles/normalise_profiles.py
                -m %(infile)s
                -L /dev/null
                > %(outfile)s'''
    job_memory="20G"
    P.run()

# ---------------------------------------------------
# Generic pipeline tasks
@follows(peakcall, geneprofiles, normaliseprofiles)
def full():
    pass


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
